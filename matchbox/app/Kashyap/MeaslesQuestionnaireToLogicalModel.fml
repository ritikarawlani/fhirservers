map "http://worldhealthorganization.github.io/smart-ot/StructureMap/MeaslesQuestionnaireToLogicalModelKJ" = "MeaslesQuestionnaireToLogicalModelKJ"
uses "http://hl7.org/fhir/StructureDefinition/QuestionnaireResponse" alias QuestionnaireResponse as source
uses "http://worldhealthorganization.github.io/smart-ot/StructureDefinition/SOTMeasles" alias MeaslesLogicalModel as target

imports "http://worldhealthorganization.github.io/smart-ot/StructureMap/MeaslesQuestionnaireToLogicalModel"
imports "http://worldhealthorganization.github.io/smart-ot/StructureMap/MetaDataTypesHelper"

group MeaslesQuestionnaireToLogicalModelKJ(source qr : QuestionnaireResponse, target measlesLm : SOTMeasles) {
  qr.item as item where linkId.value in ('investigationForm') -> measlesLm as measlesLm then mapInvestigationForm(item, measlesLm) "set Investigation form";
}

group mapInvestigationForm(source investigationForm, target measlesLm : SOTMeasles) {
  investigationForm.item as qrReportingSource where linkId.value in ('reportingSource') -> measlesLm.ReportingSource as lmReportingSource then mapReportingSource(qrReportingSource, lmReportingSource) "set Reporting Source";
  investigationForm.item as qrDemographics where linkId.value in ('demographics') -> measlesLm.Demographics as lmDemographics then mapDemographics(qrDemographics, lmDemographics) "set Demographics";
  investigationForm.item as qrVaccinationStatus where linkId.value in ('vaccinationStatus') -> measlesLm.VaccinationStatus as lmVaccinationStatus then mapVaccinationStatus(qrVaccinationStatus, lmVaccinationStatus) "set Vaccination Status";
  investigationForm.item as qrClinical where linkId.value in ('clinical') -> measlesLm.Clinical as lmClinical then mapClinical(qrClinical, lmClinical) "set Clinical";
  investigationForm.item as qrLaboratoryResults where linkId.value in ('laboratoryResults') -> measlesLm.LaboratoryResults as lmLaboratoryResults then mapLaboratoryResults(qrLaboratoryResults, lmLaboratoryResults) "set Laboratory Results";
  investigationForm.item as qrContactTracing where linkId.value in ('contactTracing') -> measlesLm.ContactTracing as lmContactTracing then mapContactTracing(qrContactTracing, lmContactTracing) "set Contact Tracing";
  investigationForm.item as qrEpiData where linkId.value in ('epiData') -> measlesLm.EpiData as lmEpiData then mapEpiData(qrEpiData, lmEpiData) "set Epi Data";
  investigationForm.item as qrClassification where linkId.value in ('classification') -> measlesLm.Classification as lmClassification then mapClassification(qrClassification, lmClassification) "set Classification";
}

group mapReportingSource(source qrReportingSource, target lmReportingSource : ReportingSourceLogicalModel) {
  qrReportingSource.item as initialDiagnosis where linkId.value in ('initialDiagnosis') -> lmReportingSource.InitialDiagnosis = (initialDiagnosis.answer.value) "set Initial Diagnosis";
  qrReportingSource.item as reportedBy where linkId.value in ('reportedBy') -> lmReportingSource.ReportedBy = (reportedBy.answer.value) "set case ID";
  qrReportingSource.item as qrReportingInstitution where linkId.value in ('reportingInstitution') -> lmReportingSource as lmReportingSource then mapReportingInstitution(qrReportingInstitution, lmReportingSource) "set reporting institution";
  qrReportingSource.item as dateOfConsultation where linkId.value in ('DateOfConsultation') -> lmReportingSource.DateOfConsultation = (dateOfConsultation.answer.value) "set date of consultation";
  qrReportingSource.item as dateOfHomeVisit where linkId.value in ('DateOfHomeVisit') -> lmReportingSource.DateOfHomeVisit = (dateOfHomeVisit.answer.value) "set date of home visit";
  qrReportingSource.item as dateReportedLocal where linkId.value in ('dateReported') -> lmReportingSource.DateReportedLocal = (dateReportedLocal.answer.value) "set date reported local";
  qrReportingSource.item as dateReportedNational where linkId.value in ('DateReportedNational') -> lmReportingSource.DateReportedNational = (dateReportedNational.answer.value) "set date reported national";
  qrReportingSource.item as providerType where linkId.value in ('TypeOfProviderReporting') -> lmReportingSource.TypeOfProviderReporting = (providerType.answer.value) "set provider type";
  qrReportingSource.item as detectedBy where linkId.value in ('DetectedBy') -> lmReportingSource.DetectedBy = (detectedBy.answer.value) "set provider type";
}

group mapReportingInstitution(source qrReportingInstitution, target lmReportingSource : ReportingSourceLogicalModel) {
  qrReportingInstitution.item as reportingFacility where linkId.value in ('reportingFacility') -> lmReportingSource.HealthServiceName = (reportingFacility.answer.value) "set health facility name";
  qrReportingInstitution.item as telephone where linkId.value in ('telephone') -> create('ContactPoint') as lmTelephone, lmTelephone.value = (telephone.answer.value), lmReportingSource.HealthServiceTelephone = lmTelephone "set telephone";
  qrReportingInstitution -> create('Address') as lmAddress then {
  qrReportingInstitution.item as country where linkId.value in ('country') -> lmAddress.country= (country.answer.value) "set country"; 
  qrReportingInstitution.item as municipality where linkId.value in ('municipality') -> lmAddress.city = (municipality.answer.value) "set city";
  qrReportingInstitution.item as state where linkId.value in ('state') -> lmAddress.state = (state.answer.value) "set state";
  qrReportingInstitution.item as locality where linkId.value in ('locality') -> lmAddress.district = (locality.answer.value) "set locality"; 
  qrReportingInstitution -> lmReportingSource.PlaceOfReporting = lmAddress "assign address";
  } "set address";
}


group mapDemographics(source qrDemographics, target lmDemographics : SOTMeaslesDemographic) {
  qrDemographics.item as name        where linkId.value in ('name')            -> create('HumanName') as lmName, lmName.family=(name.answer.value), lmDemographics.Name =lmName  "set name";
  qrDemographics.item as guardian    where linkId.value in ('guardian')        -> create('HumanName') as lmGuardian,lmGuardian.family=(guardian.answer.value), lmDemographics.Guardian = lmGuardian "set guardian";
  qrDemographics.item as address     where linkId.value in ('address')         -> create('Address') as lmAddress, lmAddress.text=(address.answer.value), lmDemographics.PlaceOfResidence = lmAddress "set address";
  qrDemographics.item as telephone   where linkId.value in ('telephone')       -> create('ContactPoint') as lmTelephone, lmTelephone.value=(telephone.answer.value), lmDemographics.Telephone = lmTelephone "set telephone";
  qrDemographics.item as landmark    where linkId.value in ('landmark')        -> lmDemographics.Landmark = (landmark.answer.value) "set landmark";
  qrDemographics.item as occupation  where linkId.value in ('occupation')      -> lmDemographics.Occupation = (occupation.answer.value) "set occupation";
  qrDemographics.item as location  where linkId.value in ('location living in') -> lmDemographics.LocalityType = (location.answer.value) "set Locality Type";
  qrDemographics.item as workAddress where linkId.value in ('workAddress')     -> create('Address') as lmAddress, lmAddress.text=(workAddress.answer.value), lmDemographics.WorkAddress = lmAddress "set workAddress";
  qrDemographics.item as sex         where linkId.value in ('sex')             -> lmDemographics.Sex = (sex.answer.value) "set sex";
  qrDemographics.item as DoB         where linkId.value in ('DoB')             -> lmDemographics.DateOfBirth = (DoB.answer.value) "set DoB";
  qrDemographics.item as ageOnset    where linkId.value in ('ageOnset')        -> create('Quantity') as lmAgeOnset, lmAgeOnset.value =(ageOnset.answer.valueInteger), lmDemographics.Age = lmAgeOnset  "set ageOnset";
}

group mapVaccinationStatus(source qrVaccinationStatus, target lmVaccinationStatus: VaccinationStatusLogicalModel)
{
  qrVaccinationStatus.item as lastDoseDate where linkId.value in ('lastDoseDate') -> lmVaccinationStatus.LastDoseDate = (lastDoseDate.answer.value) "set Last Dose Date";
  qrVaccinationStatus.item as sourceOfInformation where linkId.value in ('sourceOfInformation') -> lmVaccinationStatus.Source = (sourceOfInformation.answer.value) "set Source of Vaccination Information";
  qrVaccinationStatus.item as noOfDoses where linkId.value in ('noOfDoses') -> lmVaccinationStatus.NumberOfDoses = (noOfDoses.answer.value) "set number of doses";
  qrVaccinationStatus.item as vaccineType where linkId.value in ('vaccineType') -> lmVaccinationStatus.VaccineType = (vaccineType.answer.value) "set vaccine type";
}

group mapClinical(source qrClinical, target lmClinical: ClinicalLogicalModel) {
  qrClinical.item as fever where linkId.value in ('fever') -> lmClinical.Fever = (fever.answer.value) "set Fever";
  qrClinical.item as temperature where linkId.value in ('temperature') -> lmClinical.Temperature = (temperature.answer.valueDecimal) "set Temperature";
  qrClinical.item as dateOfFeverOnset where linkId.value in ('dateOfFeverOnset') -> lmClinical.FeverOnsetDate = (dateOfFeverOnset.answer.value) "set Date of Fever Onset";
  qrClinical.item as rash where linkId.value in ('rash') -> lmClinical.Rash = (rash.answer.value) "set Rash";
  qrClinical.item as rashType where linkId.value in ('rashType') -> lmClinical.TypeOfRash = (rashType.answer.value) "set Rash Type";
  qrClinical.item as rashDuration where linkId.value in ('rashDuration') -> lmClinical.DurationOfRash = (rashDuration.answer.valueInteger) "set Rash Duration";
  qrClinical.item as rashOnsetDate where linkId.value in ('rashOnsetDate') -> lmClinical.RashOnsetDate = (rashOnsetDate.answer.value) "set Rash Onset Date";
  qrClinical.item as cough where linkId.value in ('cough') -> lmClinical.Cough = (cough.answer.value) "set Cough";
  qrClinical.item as conjunctivitis where linkId.value in ('conjunctivitis') -> lmClinical.Conjunctivitis = (conjunctivitis.answer.value) "set Conjunctivitis";
  qrClinical.item as coryza where linkId.value in ('coryza') -> lmClinical.Coryza = (coryza.answer.value) "set Coryza";
  qrClinical.item as koplikSpots where linkId.value in ('koplikSpots') -> lmClinical.KoplikSpots = (koplikSpots.answer.value) "set Koplik Spots";
  qrClinical.item as lymphadenopathy where linkId.value in ('lymphadenopathy') -> lmClinical.Lymphadenopathy = (lymphadenopathy.answer.value) "set Lymphadenopathy";
  qrClinical.item as jointPain where linkId.value in ('jointPain') -> lmClinical.JointPain = (jointPain.answer.value) "set Arthralgia";
  qrClinical.item as pregnancy where linkId.value in ('pregnancy') -> lmClinical.PregnancyStatus = (pregnancy.answer.value) "set Pregnant";
  qrClinical.item as monthsPregnant where linkId.value in ('monthsPregnant') -> lmClinical.GestationWeeks = (monthsPregnant.answer.valueInteger) "set Pregnancy Weeks";
  qrClinical.item as placeOfBirth where linkId.value in ('placeOfBirth') -> lmClinical.IntentedBirthPlacce = (placeOfBirth.answer.value) "set Place of Birth";
  qrClinical.item as admitted where linkId.value in ('admitted') -> lmClinical.HistoryOfHospitalization = (admitted.answer.value) "set Hospitalized";
  qrClinical.item as admittedHCFName where linkId.value in ('admittedHCFName') -> lmClinical.HospitalName = (admittedHCFName.answer.value) "set Hospital Name";
  qrClinical.item as admissionDate where linkId.value in ('admissionDate') -> lmClinical.DateOfAdmission = (admissionDate.answer.value) "set Admission Date";
  qrClinical.item as hospitalRecordNumber where linkId.value in ('hospitalRecordNumber') -> lmClinical.HospitalRecordNumber = (hospitalRecordNumber.answer.value) "set Hospital Record Number";
  qrClinical.item as outcome where linkId.value in ('outcome') -> lmClinical.Outcome = (outcome.answer.value) "set Outcome";
  qrClinical.item as diseaseAdditionalInfo where linkId.value in ('diseaseAdditionalInfo') -> lmClinical.Comments = (diseaseAdditionalInfo.answer.value) "set Comments"; 
}

group mapLaboratoryResults(source qrLaboratoryResults, target lmLaboratoryResults: LaboratoryResultsLogicalModel) {
  qrLaboratoryResults.item as specimenNumber where linkId.value in ('specimenNumber') -> lmLaboratoryResults.SpecimenNumber = (specimenNumber.answer.value) "set SpecimenNumber";
  qrLaboratoryResults.item as sampleType where linkId.value in ('sampleType') -> lmLaboratoryResults.SampleType = (sampleType.answer.value) "set SampleType";
  qrLaboratoryResults.item as collectionDate where linkId.value in ('collectionDate') -> lmLaboratoryResults.SpecimenCollectionDate = (collectionDate.answer.value) "set SpecimenCollectionDate";
  qrLaboratoryResults.item as labName where linkId.value in ('labName') -> lmLaboratoryResults.LabName = (labName.answer.value) "set Shipment Date";
  qrLaboratoryResults.item as specimenSentDate where linkId.value in ('specimenSentDate') -> lmLaboratoryResults.SpecimenSentDate = (specimenSentDate.answer.value) "set SpecimenSentDate";
  qrLaboratoryResults.item as specimenReceivedDate where linkId.value in ('specimenReceivedDate') -> lmLaboratoryResults.SpecimenRecdDate = (specimenReceivedDate.answer.value) "set SpecimenRecdDate"; 
  qrLaboratoryResults.item as sampleId where linkId.value in ('sampleId') -> lmLaboratoryResults.SampleId = (sampleId.answer.value) "set SampleId";
  qrLaboratoryResults.item as testPerformed where linkId.value in ('testPerformed') -> lmLaboratoryResults.TypeOfTest = (testPerformed.answer.value) "set TypeOfTest";
  qrLaboratoryResults.item as antigen where linkId.value in ('antigen') -> lmLaboratoryResults.Antigen = (antigen.answer.value) "set Antigen";
  qrLaboratoryResults.item as result where linkId.value in ('result') -> lmLaboratoryResults.Results = (result.answer.value) "set Results";
  qrLaboratoryResults.item as resultDate where linkId.value in ('resultDate') -> lmLaboratoryResults.LabResultsDate = (resultDate.answer.value) "set LabResultsDate  ";
  qrLaboratoryResults.item as specifyVirus where linkId.value in ('specifyVirus') -> lmLaboratoryResults.ViralGenotype = (specifyVirus.answer.value) "set specify virus";

}

group mapContactTracing(source qrContactTracing, target lmContactTracing: ContactTracingLogicalModel) {

}

group mapEpiData(source qrEpiData, target lmEpiData: EpiDataLogicalModel) {

}

group mapClassification(source qrClassification, target lmClassification: ClassificationLogicalModel) {
  qrClassification.item as finalClassification where linkId.value in ('finalClassification') -> lmClassification.FinalClassification = (finalClassification.answer.value) "set finalClassification";
  qrClassification.item as confirmationBasis where linkId.value in ('confirmationBasis') -> lmClassification.ConfirmationBasis = (confirmationBasis.answer.value) "set confirmationBasis";
  qrClassification.item as source where linkId.value in ('source') -> lmClassification.Source = (source.answer.value) "set source";
  qrClassification.item as countryImportation where linkId.value in ('countryImportation') -> lmClassification.CountryImportation = (countryImportation.answer.value) "set countryImportation";
  qrClassification.item as discardingBasis where linkId.value in ('discardingBasis') -> lmClassification.DiscardingBasis = (discardingBasis.answer.value) "set discardingBasis";
  qrClassification.item as contact where linkId.value in ('contact') -> lmClassification.Contact = (contact.answer.value) "set contact";
  qrClassification.item as contactCaseNo where linkId.value in ('contactCaseNo') -> lmClassification.ContactCaseNo = (contactCaseNo.answer.value) "set contactCaseNo";
  qrClassification.item as classifiedBy where linkId.value in ('classifiedBy') -> lmClassification.ClassifiedBy = (classifiedBy.answer.value) "set classifiedBy";
  qrClassification.item as classificationDate where linkId.value in ('classificationDate') -> lmClassification.ClassificationDate = (classificationDate.answer.value) "set classificationDate";
}
